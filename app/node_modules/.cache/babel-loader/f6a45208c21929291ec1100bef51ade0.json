{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport CandyMachine from './CandyMachine';\nimport { CheckIfWalletIsConnected } from '../../../utils/checkIfWalletIsConnected'; // Constants\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst NftDrop = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await CheckIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header header-nft\",\n          children: \"\\uD83C\\uDF6D Generative NFTs of Taylor Swift Album Covers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"This is a collection of 10 NFTs. Each NFT is a combination of a circle and a triangle with a Taylor Swift album cover as the background.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), walletAddress && /*#__PURE__*/_jsxDEV(CandyMachine, {\n        walletAddress: window.solana\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftDrop, \"FzBUXhdaz8WdQW5Q+ejK8XBThPU=\");\n\n_c = NftDrop;\nexport default NftDrop;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftDrop\");","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/index.js"],"names":["React","useEffect","useState","CandyMachine","CheckIfWalletIsConnected","TWITTER_HANDLE","TWITTER_LINK","NftDrop","walletAddress","setWalletAddress","connectWallet","solana","window","response","connect","console","log","publicKey","toString","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener","twitterLogo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,cAAP;;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,wBAAT,QAAyC,yCAAzC,C,CAEA;;;AACA,MAAMC,cAAc,GAAG,YAAvB;AACA,MAAMC,YAAY,GAAI,uBAAsBD,cAAe,EAA3D;;AAEA,MAAME,OAAO,GAAG,MAAM;AAAA;;AAEpB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,IAAD,CAAlD;AAEA;AACF;AACA;AACA;;AACE,QAAMQ,aAAa,GAAG,YAAY;AAChC,UAAM;AAAEC,MAAAA;AAAF,QAAaC,MAAnB;;AAEA,QAAID,MAAJ,EAAY;AACV,YAAME,QAAQ,GAAG,MAAMF,MAAM,CAACG,OAAP,EAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CH,QAAQ,CAACI,SAAT,CAAmBC,QAAnB,EAA1C;AACAT,MAAAA,gBAAgB,CAACI,QAAQ,CAACI,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;AACD;AACF,GARD;AAUA;AACF;AACA;AACA;;;AACE,QAAMC,2BAA2B,GAAG,mBAClC;AACE,IAAA,SAAS,EAAC,kCADZ;AAEE,IAAA,OAAO,EAAET,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASA;AACF;AACA;AACA;;;AACET,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,MAAM,GAAG,YAAY;AACzB,YAAMhB,wBAAwB,EAA9B;AACD,KAFD;;AAGAQ,IAAAA,MAAM,CAACS,gBAAP,CAAwB,MAAxB,EAAgCD,MAAhC;AACA,WAAO,MAAMR,MAAM,CAACU,mBAAP,CAA2B,MAA3B,EAAmCF,MAAnC,CAAb;AACD,GANQ,EAMN,EANM,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAG,UAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAIG,CAACZ,aAAD,IAAkBW,2BAA2B,EAJhD;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAOGX,aAAa,iBAAI,QAAC,YAAD;AAAc,QAAA,aAAa,EAAEI,MAAM,CAACD;AAApC;AAAA;AAAA;AAAA;AAAA,cAPpB,eAQE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,GAAG,EAAC,cAAT;AAAwB,UAAA,SAAS,EAAC,cAAlC;AAAiD,UAAA,GAAG,EAAEY;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,aADZ;AAEE,UAAA,IAAI,EAAEjB,YAFR;AAGE,UAAA,MAAM,EAAC,QAHT;AAIE,UAAA,GAAG,EAAC,YAJN;AAAA,oBAKG,aAAYD,cAAe;AAL9B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAlED;;GAAME,O;;KAAAA,O;AAoEN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\nimport { CheckIfWalletIsConnected } from '../../../utils/checkIfWalletIsConnected';\n\n// Constants\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst NftDrop = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await CheckIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header header-nft\">üç≠ Generative NFTs of Taylor Swift Album Covers</p>\n          <p className=\"sub-text\">This is a collection of 10 NFTs. Each NFT is a combination of a circle\n          and a triangle with a Taylor Swift album cover as the background.</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NftDrop;\n"]},"metadata":{},"sourceType":"module"}