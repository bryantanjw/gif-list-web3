{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport './CandyMachine.css';\nimport CountdownTimer from '../CountdownTimer';\nimport { candyMachineProgram, TOKEN_METADATA_PROGRAM_ID, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, getAtaForMint, getNetworkExpire, getNetworkToken, CIVIC } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram\n} = web3;\nconst opts = {\n  preflightCommitment: 'processed'\n};\n\nconst CandyMachine = _ref => {\n  _s();\n\n  let {\n    walletAddress\n  } = _ref;\n  // Add state property inside your component like this\n  const [candyMachine, setCandyMachine] = useState(null);\n\n  const getCandyMachineCreator = async candyMachine => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress([Buffer.from('candy_machine'), candyMachineID.toBuffer()], candyMachineProgram);\n  };\n\n  const getMetadata = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const getMasterEdition = async mint => {\n    return (await PublicKey.findProgramAddress([Buffer.from('metadata'), TOKEN_METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer(), Buffer.from('edition')], TOKEN_METADATA_PROGRAM_ID))[0];\n  };\n\n  const createAssociatedTokenAccountInstruction = (associatedTokenAddress, payer, walletAddress, splTokenMintAddress) => {\n    const keys = [{\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([])\n    });\n  };\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n    const userTokenAccountAddress = (await getAtaForMint(mint.publicKey, walletAddress.publicKey))[0];\n    const userPayingAccountAddress = candyMachine.state.tokenMint ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0] : walletAddress.publicKey;\n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [web3.SystemProgram.createAccount({\n      fromPubkey: walletAddress.publicKey,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports: await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(MintLayout.span),\n      programId: TOKEN_PROGRAM_ID\n    }), Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, walletAddress.publicKey, walletAddress.publicKey), createAssociatedTokenAccountInstruction(userTokenAccountAddress, walletAddress.publicKey, walletAddress.publicKey, mint.publicKey), Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, userTokenAccountAddress, walletAddress.publicKey, [], 1)];\n\n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (await getNetworkToken(walletAddress.publicKey, candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n        isWritable: true,\n        isSigner: false\n      });\n\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false\n        });\n        remainingAccounts.push({\n          pubkey: (await getNetworkExpire(candyMachine.state.gatekeeper.gatekeeperNetwork))[0],\n          isWritable: false,\n          isSigner: false\n        });\n      }\n    }\n\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(candyMachine.state.whitelistMintSettings.mint);\n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false\n      });\n\n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists = await candyMachine.program.provider.connection.getAccountInfo(whitelistToken);\n\n        if (exists) {\n          instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID, whitelistToken, whitelistBurnAuthority.publicKey, walletAddress.publicKey, [], 1));\n          cleanupInstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID, whitelistToken, walletAddress.publicKey, []));\n        }\n      }\n    }\n\n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true\n      });\n      instructions.push(Token.createApproveInstruction(TOKEN_PROGRAM_ID, userPayingAccountAddress, transferAuthority.publicKey, walletAddress.publicKey, [], candyMachine.state.price.toNumber()));\n      cleanupInstructions.push(Token.createRevokeInstruction(TOKEN_PROGRAM_ID, userPayingAccountAddress, walletAddress.publicKey, []));\n    }\n\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(candyMachineAddress);\n    instructions.push(await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: walletAddress.publicKey,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY\n      },\n      remainingAccounts: remainingAccounts.length > 0 ? remainingAccounts : undefined\n    }));\n\n    try {\n      return (await sendTransactions(candyMachine.program.provider.connection, candyMachine.program.provider.wallet, [instructions, cleanupInstructions], [signers, []])).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n\n    return [];\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST; // Create a new connection object\n\n    const connection = new Connection(rpcHost); // Create a new Solana provider object\n\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }; // Declare getCandyMachineState as an async method\n\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider(); // Get metadata about your deployed candy machine program\n\n    const idl = await Program.fetchIdl(candyMachineProgram, provider); // Create a program that you can call\n\n    const program = new Program(idl, candyMachineProgram, provider); // Fetch the metadata from your candy machine\n\n    const candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID); // Parse out all our metadata and log it out\n\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n    const presale = candyMachine.data.whitelistMintSettings && candyMachine.data.whitelistMintSettings.presale && (!candyMachine.data.goLiveDate || candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000); // We will be using this later in our UI so let's generate this now\n\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toGMTString()}`; // Add this data to your state to render\n\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive: (presale || candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) && (candyMachine.endSettings ? candyMachine.endSettings.endSettingType.date ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000 : itemsRedeemed < candyMachine.endSettings.number.toNumber() : true),\n        isPresale: presale,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price\n      }\n    });\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n      presale\n    });\n  }; // Create render function\n\n\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(candyMachine.state.goLiveData * 1000); // If currentDate is before dropDate, render our Countdown component\n\n    if (currentDate < dropDate) {\n      console.log('Before drop date!'); // Don't forget to pass over your dropDate!\n\n      return /*#__PURE__*/_jsxDEV(CountdownTimer, {\n        dropDate: dropDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 14\n      }, this);\n    } // Else let's just return the current drop date\n\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Drop Date: ${candyMachine.state.goLiveDateTimeString}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 12\n    }, this);\n  };\n\n  return (// Only show this if machineStats is available\n    candyMachine && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"machine-container\",\n      children: [renderDropTimer(), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"0.01 SOL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cta-button mint-button\",\n        onClick: mintToken,\n        children: \"Mint NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this)\n  );\n};\n\n_s(CandyMachine, \"3Hlxuq9jFH1zBoL2DpclcrNEEgc=\");\n\n_c = CandyMachine;\nexport default CandyMachine;\n\nvar _c;\n\n$RefreshReg$(_c, \"CandyMachine\");","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/index.js"],"names":["React","useEffect","useState","Connection","PublicKey","Program","Provider","web3","MintLayout","TOKEN_PROGRAM_ID","Token","sendTransactions","CountdownTimer","candyMachineProgram","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","getAtaForMint","getNetworkExpire","getNetworkToken","CIVIC","SystemProgram","opts","preflightCommitment","CandyMachine","walletAddress","candyMachine","setCandyMachine","getCandyMachineCreator","candyMachineID","findProgramAddress","Buffer","from","toBuffer","getMetadata","mint","getMasterEdition","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","mintToken","Keypair","generate","userTokenAccountAddress","publicKey","userPayingAccountAddress","state","tokenMint","candyMachineAddress","id","remainingAccounts","signers","cleanupInstructions","instructions","createAccount","fromPubkey","newAccountPubkey","space","span","lamports","program","provider","connection","getMinimumBalanceForRentExemption","createInitMintInstruction","createMintToInstruction","gatekeeper","push","gatekeeperNetwork","expireOnUse","whitelistMintSettings","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","exists","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","price","toNumber","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","wallet","treasury","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","txs","map","t","txid","e","console","log","getCandyMachineState","getProvider","rpcHost","process","env","REACT_APP_SOLANA_RPC_HOST","window","solana","idl","fetchIdl","account","fetch","REACT_APP_CANDY_MACHINE_ID","itemsAvailable","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","presale","Date","getTime","goLiveDateTimeString","toGMTString","isSoldOut","isActive","endSettings","endSettingType","date","number","isPresale","hiddenSettings","renderDropTimer","currentDate","dropDate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport './CandyMachine.css';\nimport CountdownTimer from '../CountdownTimer';\n\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  CIVIC\n} from './helpers';\n\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst CandyMachine = ({ walletAddress }) => {\n  // Add state property inside your component like this\n  const [candyMachine, setCandyMachine] = useState(null);\n\n  const getCandyMachineCreator = async (candyMachine) => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachineID.toBuffer()],\n        candyMachineProgram,\n    );\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n  \n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n\n    const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, walletAddress.publicKey)\n    )[0];\n  \n    const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\n      : walletAddress.publicKey;\n  \n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [\n      web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span,\n          ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n      ),\n      createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n        mint.publicKey,\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        [],\n        1,\n      ),\n    ];\n  \n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkToken(\n            walletAddress.publicKey,\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: true,\n        isSigner: false,\n      });\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: (\n            await getNetworkExpire(\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n          )[0],\n          isWritable: false,\n          isSigner: false,\n        });\n      }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n      );\n  \n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      });\n  \n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n  \n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true,\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists =\n          await candyMachine.program.provider.connection.getAccountInfo(\n            whitelistToken,\n          );\n        if (exists) {\n          instructions.push(\n            Token.createApproveInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              whitelistBurnAuthority.publicKey,\n              walletAddress.publicKey,\n              [],\n              1,\n            ),\n          );\n          cleanupInstructions.push(\n            Token.createRevokeInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              walletAddress.publicKey,\n              [],\n            ),\n          );\n        }\n      }\n    }\n  \n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n  \n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n  \n      instructions.push(\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          transferAuthority.publicKey,\n          walletAddress.publicKey,\n          [],\n          candyMachine.state.price.toNumber(),\n        ),\n      );\n      cleanupInstructions.push(\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          walletAddress.publicKey,\n          [],\n        ),\n      );\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n  \n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n    );\n  \n    instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: walletAddress.publicKey,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: walletAddress.publicKey,\n          updateAuthority: walletAddress.publicKey,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          clock: web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n    );\n  \n    try {\n      return (\n        await sendTransactions(\n          candyMachine.program.provider.connection,\n          candyMachine.program.provider.wallet,\n          [instructions, cleanupInstructions],\n          [signers, []],\n        )\n      ).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n    return [];\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n    \n    // Create a new Solana provider object\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n  \n    return provider;\n  };\n\n  // Declare getCandyMachineState as an async method\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n    \n    // Get metadata about your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n\n    // Create a program that you can call\n    const program = new Program(idl, candyMachineProgram, provider);\n\n    // Fetch the metadata from your candy machine\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n    \n    // Parse out all our metadata and log it out\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n    const presale =\n      candyMachine.data.whitelistMintSettings &&\n      candyMachine.data.whitelistMintSettings.presale &&\n      (!candyMachine.data.goLiveDate ||\n        candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n    \n    // We will be using this later in our UI so let's generate this now\n    const goLiveDateTimeString = `${new Date(\n      goLiveData * 1000\n    ).toGMTString()}`\n\n    // Add this data to your state to render\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive:\n          (presale ||\n            candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\n          (candyMachine.endSettings\n            ? candyMachine.endSettings.endSettingType.date\n              ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\n              : itemsRedeemed < candyMachine.endSettings.number.toNumber()\n            : true),\n        isPresale: presale,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price,\n      },\n    });\n    \n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n      presale,\n    });\n  };\n\n  // Create render function\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(candyMachine.state.goLiveData * 1000);\n\n    // If currentDate is before dropDate, render our Countdown component\n    if (currentDate < dropDate) {\n      console.log('Before drop date!');\n      // Don't forget to pass over your dropDate!\n      return <CountdownTimer dropDate={dropDate} />;\n    }\n\n    // Else let's just return the current drop date\n    return <p>{`Drop Date: ${candyMachine.state.goLiveDateTimeString}`}</p>;\n  };\n\n  return (\n    // Only show this if machineStats is available\n    candyMachine && (\n      <div className=\"machine-container\">\n        {renderDropTimer()}\n        <p>{`Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`}</p>\n        <p>Price: <b>0.01 SOL</b></p>\n        <button className=\"cta-button mint-button\" onClick={mintToken}>\n          Mint NFT\n        </button>\n      </div>\n    )\n  );\n};\n\nexport default CandyMachine;\n"]},"metadata":{},"sourceType":"module"}