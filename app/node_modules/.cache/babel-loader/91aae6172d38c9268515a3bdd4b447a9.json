{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nexport { EventEmitter };\n/**\n * A wallet's readiness describes a series of states that the wallet can be in,\n * depending on what kind of wallet it is. An installable wallet (eg. a browser\n * extension like Phantom) might be `Installed` if we've found the Phantom API\n * in the global scope, or `NotDetected` otherwise. A loadable, zero-install\n * runtime (eg. Torus Wallet) might simply signal that it's `Loadable`. Use this\n * metadata to personalize the wallet list for each user (eg. to show their\n * installed wallets first).\n */\n\nexport var WalletReadyState;\n\n(function (WalletReadyState) {\n  /**\n   * User-installable wallets can typically be detected by scanning for an API\n   * that they've injected into the global context. If such an API is present,\n   * we consider the wallet to have been installed.\n   */\n  WalletReadyState[\"Installed\"] = \"Installed\";\n  WalletReadyState[\"NotDetected\"] = \"NotDetected\";\n  /**\n   * Loadable wallets are always available to you. Since you can load them at\n   * any time, it's meaningless to say that they have been detected.\n   */\n\n  WalletReadyState[\"Loadable\"] = \"Loadable\";\n  /**\n   * If a wallet is not supported on a given platform (eg. server-rendering, or\n   * mobile) then it will stay in the `Unsupported` state.\n   */\n\n  WalletReadyState[\"Unsupported\"] = \"Unsupported\";\n})(WalletReadyState || (WalletReadyState = {}));\n\nexport class BaseWalletAdapter extends EventEmitter {\n  get connected() {\n    return !!this.publicKey;\n  }\n\n}\nexport function scopePollingDetectionStrategy(detect) {\n  // Early return when server-side rendering\n  if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n  const poll = () => {\n    // Wallet detected, nothing more to do\n    if (detect()) return; // Wallet not detected yet, try detecting every second\n\n    const interval = setInterval(() => {\n      // Wallet detected, nothing more to do\n      if (detect()) {\n        clearInterval(interval);\n      }\n    }, 1000);\n  };\n\n  if (document.readyState === 'complete') {\n    poll();\n    return;\n  }\n\n  function listener() {\n    window.removeEventListener('load', listener);\n    poll();\n  }\n\n  window.addEventListener('load', listener);\n}","map":{"version":3,"mappings":"AACA,OAAOA,YAAP,MAAyB,eAAzB;AAGA,SAASA,YAAT;AAqCA;;;;;;;;;;AASA,WAAYC,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;AACxB;;;;;AAKAA;AACAA;AACA;;;;;AAIAA;AACA;;;;;AAIAA;AACH,CAlBD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;;AAoBA,OAAM,MAAgBC,iBAAhB,SAA0CF,YAA1C,CAA2E;AAQhE,MAATG,SAAS;AACT,WAAO,CAAC,CAAC,KAAKC,SAAd;AACH;;AAV4E;AAqBjF,OAAM,SAAUC,6BAAV,CAAwCC,MAAxC,EAA6D;AAC/D;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAAzD,EAAsE;;AAEtE,QAAMC,IAAI,GAAG,MAAK;AACd;AACA,QAAIH,MAAM,EAAV,EAAc,OAFA,CAId;;AACA,UAAMI,QAAQ,GAAGC,WAAW,CAAC,MAAK;AAC9B;AACA,UAAIL,MAAM,EAAV,EAAc;AACVM,qBAAa,CAACF,QAAD,CAAb;AACH;AACJ,KAL2B,EAKzB,IALyB,CAA5B;AAMH,GAXD;;AAaA,MAAIF,QAAQ,CAACK,UAAT,KAAwB,UAA5B,EAAwC;AACpCJ,QAAI;AACJ;AACH;;AAED,WAASK,QAAT,GAAiB;AACbP,UAAM,CAACQ,mBAAP,CAA2B,MAA3B,EAAmCD,QAAnC;AACAL,QAAI;AACP;;AACDF,QAAM,CAACS,gBAAP,CAAwB,MAAxB,EAAgCF,QAAhC;AACH","names":["EventEmitter","WalletReadyState","BaseWalletAdapter","connected","publicKey","scopePollingDetectionStrategy","detect","window","document","poll","interval","setInterval","clearInterval","readyState","listener","removeEventListener","addEventListener"],"sourceRoot":"","sources":["../../src/adapter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}