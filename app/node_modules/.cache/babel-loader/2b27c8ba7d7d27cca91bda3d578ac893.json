{"ast":null,"code":"import { web3 } from '@project-serum/anchor';\nimport * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { LAMPORTS_PER_SOL, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js'; // CLI Properties Given to us\n\nconst candyMachineProgram = new web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ');\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nconst CIVIC = new anchor.web3.PublicKey('gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs');\n\nconst toDate = value => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nconst formatNumber = {\n  format: val => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: val => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  }\n};\n\nconst getAtaForMint = async (mint, buyer) => {\n  return await anchor.web3.PublicKey.findProgramAddress([buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);\n};\n\nconst getNetworkExpire = async gatekeeperNetwork => {\n  return await anchor.web3.PublicKey.findProgramAddress([gatekeeperNetwork.toBuffer(), Buffer.from('expire')], CIVIC);\n};\n\nconst getNetworkToken = async (wallet, gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress([wallet.toBuffer(), Buffer.from('gateway'), Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]), gatekeeperNetwork.toBuffer()], CIVIC);\n};\n\nfunction createAssociatedTokenAccountInstruction(associatedTokenAddress, payer, walletAddress, splTokenMintAddress) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n}\n\nexport { candyMachineProgram, TOKEN_METADATA_PROGRAM_ID, SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID, CIVIC, toDate, formatNumber, getAtaForMint, getNetworkExpire, getNetworkToken, createAssociatedTokenAccountInstruction };","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/helpers.js"],"names":["web3","anchor","TOKEN_PROGRAM_ID","SystemProgram","LAMPORTS_PER_SOL","SYSVAR_RENT_PUBKEY","TransactionInstruction","candyMachineProgram","PublicKey","TOKEN_METADATA_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","toDate","value","Date","toNumber","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","undefined","getAtaForMint","mint","buyer","findProgramAddress","toBuffer","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","wallet","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","data"],"mappings":"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","sourcesContent":["import { web3 } from '@project-serum/anchor';\nimport * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\n\nconst CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nconst toDate = (value) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nconst formatNumber = {\n  format: (val) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nconst getAtaForMint = async (mint, buyer)=> {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nconst getNetworkExpire = async (gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nconst getNetworkToken = async (wallet, gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nfunction createAssociatedTokenAccountInstruction(\n  associatedTokenAddress,\n  payer,\n  walletAddress,\n  splTokenMintAddress,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  CIVIC,\n  toDate,\n  formatNumber,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  createAssociatedTokenAccountInstruction,\n};\n"]},"metadata":{},"sourceType":"module"}