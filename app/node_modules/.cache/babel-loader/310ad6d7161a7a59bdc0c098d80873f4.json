{"ast":null,"code":"import { useState } from \"react\";\n/*\n* This function holds the logic for deciding if a Phantom Wallet is\n* connected or not\n*/\n\nexport const checkIfWalletIsConnected = async () => {\n  try {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      if (solana.isPhantom) {\n        console.log('Phantom wallet found!');\n        /*\n        * The solana object gives us a function that will allow us to connect\n        * directly with the user's wallet!\n        */\n\n        const response = await solana.connect({\n          onlyIfTrusted: true\n        });\n        console.log('Connected with Public Key:', response.publicKey.toString());\n        /*\n        * Set the user's publicKey in state to be used later!\n        */\n\n        setWalletAddress(response.publicKey.toString());\n      }\n    } else {\n      alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/utils/checkIfWalletIsConnected.js"],"names":["useState","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","setWalletAddress","alert","error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,YAAY;AAChD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaC,MAAnB;;AAEA,QAAID,MAAJ,EAAY;AACZ,UAAIA,MAAM,CAACE,SAAX,EAAsB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEA;AACZ;AACA;AACA;;AACY,cAAMC,QAAQ,GAAG,MAAML,MAAM,CAACM,OAAP,CAAe;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SAAf,CAAvB;AACAJ,QAAAA,OAAO,CAACC,GAAR,CACA,4BADA,EAEAC,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAFA;AAKA;AACZ;AACA;;AACYC,QAAAA,gBAAgB,CAACL,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;AACH;AACA,KAnBD,MAmBO;AACPE,MAAAA,KAAK,CAAC,kDAAD,CAAL;AACC;AACJ,GAzBD,CAyBE,OAAOC,KAAP,EAAc;AACZT,IAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACH;AACJ,CA7BM","sourcesContent":["import { useState } from \"react\";\n\n/*\n* This function holds the logic for deciding if a Phantom Wallet is\n* connected or not\n*/\nexport const checkIfWalletIsConnected = async () => {\n    try {\n        const { solana } = window;\n\n        if (solana) {\n        if (solana.isPhantom) {\n            console.log('Phantom wallet found!');\n\n            /*\n            * The solana object gives us a function that will allow us to connect\n            * directly with the user's wallet!\n            */\n            const response = await solana.connect({ onlyIfTrusted: true });\n            console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n            );\n\n            /*\n            * Set the user's publicKey in state to be used later!\n            */\n            setWalletAddress(response.publicKey.toString());\n        }\n        } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};"]},"metadata":{},"sourceType":"module"}