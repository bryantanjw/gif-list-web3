{"ast":null,"code":"import e, { createContext as t, Component as r, Children as n, cloneElement as i } from \"react\";\nimport \"prop-types\";\nimport { getFlippedElementPositionsBeforeUpdate as o, onFlipKeyUpdate as p, utilities as l, constants as a, spring as s } from \"flip-toolkit\";\n\nfunction c(e, t) {\n  if (null == e) return {};\n  var r,\n      n,\n      i = {},\n      o = Object.keys(e);\n\n  for (n = 0; n < o.length; n++) t.indexOf(r = o[n]) >= 0 || (i[r] = e[r]);\n\n  return i;\n}\n\nvar d = t({}),\n    f = t(\"portal\"),\n    u = function (t) {\n  var r, n;\n\n  function i() {\n    var e;\n    return (e = t.apply(this, arguments) || this).inProgressAnimations = {}, e.flipCallbacks = {}, e.el = void 0, e;\n  }\n\n  n = t, (r = i).prototype = Object.create(n.prototype), r.prototype.constructor = r, r.__proto__ = n;\n  var l = i.prototype;\n  return l.getSnapshotBeforeUpdate = function (e) {\n    return e.flipKey !== this.props.flipKey && this.el ? o({\n      element: this.el,\n      flipCallbacks: this.flipCallbacks,\n      inProgressAnimations: this.inProgressAnimations,\n      portalKey: this.props.portalKey\n    }) : null;\n  }, l.componentDidUpdate = function (e, t, r) {\n    this.props.flipKey !== e.flipKey && this.el && p({\n      flippedElementPositionsBeforeUpdate: r.flippedElementPositions,\n      cachedOrderedFlipIds: r.cachedOrderedFlipIds,\n      containerEl: this.el,\n      inProgressAnimations: this.inProgressAnimations,\n      flipCallbacks: this.flipCallbacks,\n      applyTransformOrigin: this.props.applyTransformOrigin,\n      spring: this.props.spring,\n      debug: this.props.debug,\n      portalKey: this.props.portalKey,\n      staggerConfig: this.props.staggerConfig,\n      handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n      decisionData: {\n        previous: e.decisionData,\n        current: this.props.decisionData\n      },\n      onComplete: this.props.onComplete,\n      onStart: this.props.onStart\n    });\n  }, l.render = function () {\n    var t = this,\n        r = this.props,\n        n = r.portalKey,\n        i = e.createElement(d.Provider, {\n      value: this.flipCallbacks\n    }, e.createElement(r.element, {\n      className: r.className,\n      ref: function (e) {\n        return t.el = e;\n      }\n    }, this.props.children));\n    return n && (i = e.createElement(f.Provider, {\n      value: n\n    }, i)), i;\n  }, i;\n}(r);\n\nu.defaultProps = {\n  applyTransformOrigin: !0,\n  element: \"div\"\n};\n\nvar h = function (e) {\n  var t,\n      r = e.children,\n      o = e.flipId,\n      p = e.inverseFlipId,\n      s = e.portalKey,\n      d = c(e, [\"children\", \"flipId\", \"inverseFlipId\", \"portalKey\"]),\n      f = r,\n      u = function (e) {\n    return \"function\" == typeof e;\n  }(f);\n\n  if (!u) try {\n    f = n.only(r);\n  } catch (e) {\n    throw new Error(\"Each Flipped component must wrap a single child\");\n  }\n  d.scale || d.translate || d.opacity || l.assign(d, {\n    translate: !0,\n    scale: !0,\n    opacity: !0\n  });\n  var h = ((t = {})[a.DATA_FLIP_CONFIG] = JSON.stringify(d), t);\n  return void 0 !== o ? h[a.DATA_FLIP_ID] = String(o) : p && (h[a.DATA_INVERSE_FLIP_ID] = String(p)), void 0 !== s && (h[a.DATA_PORTAL_KEY] = s), u ? f(h) : i(f, h);\n},\n    m = function (t) {\n  var r = t.children,\n      n = t.flipId,\n      i = t.shouldFlip,\n      o = t.shouldInvert,\n      p = t.onAppear,\n      a = t.onStart,\n      s = t.onStartImmediate,\n      u = t.onComplete,\n      m = t.onExit,\n      g = t.onSpringUpdate,\n      y = c(t, [\"children\", \"flipId\", \"shouldFlip\", \"shouldInvert\", \"onAppear\", \"onStart\", \"onStartImmediate\", \"onComplete\", \"onExit\", \"onSpringUpdate\"]);\n  return r ? y.inverseFlipId ? e.createElement(h, Object.assign({}, y), r) : e.createElement(f.Consumer, null, function (t) {\n    return e.createElement(d.Consumer, null, function (c) {\n      return l.isObject(c) && n && (c[n] = {\n        shouldFlip: i,\n        shouldInvert: o,\n        onAppear: p,\n        onStart: a,\n        onStartImmediate: s,\n        onComplete: u,\n        onExit: m,\n        onSpringUpdate: g\n      }), e.createElement(h, Object.assign({\n        flipId: n\n      }, y, {\n        portalKey: t\n      }), r);\n    });\n  }) : null;\n};\n\nm.displayName = \"Flipped\";\n\nvar g = function (e) {\n  var t;\n  return i(e.children, ((t = {})[a.DATA_EXIT_CONTAINER] = !0, t));\n};\n\nexport { g as ExitContainer, m as Flipped, u as Flipper, s as spring };","map":{"version":3,"mappings":"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","names":["FlipContext","createContext","PortalContext","Flipper","_this","undefined","getSnapshotBeforeUpdate","prevProps","flipKey","this","props","el","getFlippedElementPositionsBeforeUpdate","element","flipCallbacks","inProgressAnimations","portalKey","componentDidUpdate","_prevState","cachedData","onFlipKeyUpdate","flippedElementPositionsBeforeUpdate","flippedElementPositions","cachedOrderedFlipIds","containerEl","applyTransformOrigin","spring","debug","staggerConfig","handleEnterUpdateDelete","decisionData","previous","current","onComplete","onStart","render","flipperMarkup","React","Provider","value","className","ref","_this2","children","Component","Flipped","flipId","inverseFlipId","rest","child","isFunctionAsChildren","isFunction","Children","only","e","Error","scale","translate","opacity","utilities","assign","dataAttributes","constants","DATA_FLIP_CONFIG","JSON","stringify","DATA_FLIP_ID","String","DATA_INVERSE_FLIP_ID","DATA_PORTAL_KEY","cloneElement","FlippedWithContext","shouldFlip","shouldInvert","onAppear","onStartImmediate","onExit","onSpringUpdate","Consumer","isObject","data","displayName","ExitContainer","DATA_EXIT_CONTAINER","t"],"sources":["../src/Flipper/context.ts","../src/Flipper/index.tsx","../src/Flipped/index.tsx","../src/ExitContainer/index.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport { FlipCallbacks } from 'flip-toolkit/lib/types'\n\nexport const FlipContext = createContext({} as FlipCallbacks)\nexport const PortalContext = createContext('portal')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  getFlippedElementPositionsBeforeUpdate,\n  onFlipKeyUpdate\n} from 'flip-toolkit'\nimport {\n  FlipperProps,\n  InProgressAnimations,\n  FlipCallbacks\n} from 'flip-toolkit/lib/types'\nimport { FlippedElementPositionsBeforeUpdateReturnVals } from 'flip-toolkit/lib/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlipContext, PortalContext } from './context'\n\nclass Flipper extends Component<FlipperProps> {\n  static defaultProps = {\n    applyTransformOrigin: true,\n    element: 'div'\n  }\n\n  private inProgressAnimations: InProgressAnimations = {}\n  private flipCallbacks: FlipCallbacks = {}\n  private el?: HTMLElement = undefined\n\n  getSnapshotBeforeUpdate(prevProps: FlipperProps) {\n    if (prevProps.flipKey !== this.props.flipKey && this.el) {\n      return getFlippedElementPositionsBeforeUpdate({\n        element: this.el,\n        // if onExit callbacks exist here, we'll cache the DOM node\n        flipCallbacks: this.flipCallbacks,\n        inProgressAnimations: this.inProgressAnimations,\n        portalKey: this.props.portalKey\n      })\n    }\n    return null\n  }\n\n  componentDidUpdate(\n    prevProps: FlipperProps,\n    _prevState: any,\n    cachedData: FlippedElementPositionsBeforeUpdateReturnVals\n  ) {\n    if (this.props.flipKey !== prevProps.flipKey && this.el) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: cachedData.flippedElementPositions,\n        cachedOrderedFlipIds: cachedData.cachedOrderedFlipIds,\n        containerEl: this.el,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.props.applyTransformOrigin,\n        spring: this.props.spring,\n        debug: this.props.debug,\n        portalKey: this.props.portalKey,\n        staggerConfig: this.props.staggerConfig,\n        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevProps.decisionData,\n          current: this.props.decisionData\n        },\n        onComplete: this.props.onComplete,\n        onStart: this.props.onStart\n      })\n    }\n  }\n\n  public render() {\n    const { element, className, portalKey } = this.props\n    const Element = element\n\n    let flipperMarkup = (\n      <FlipContext.Provider value={this.flipCallbacks}>\n        {/*\n        // @ts-ignore */}\n        <Element\n          className={className}\n          ref={(el: HTMLElement) => (this.el = el)}\n        >\n          {this.props.children}\n        </Element>\n      </FlipContext.Provider>\n    )\n\n    if (portalKey) {\n      flipperMarkup = (\n        <PortalContext.Provider value={portalKey}>\n          {flipperMarkup}\n        </PortalContext.Provider>\n      )\n    }\n\n    return flipperMarkup\n  }\n}\n// @ts-ignore\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  Flipper.propTypes = {\n    flipKey: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.bool\n    ]),\n    children: PropTypes.node.isRequired,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    applyTransformOrigin: PropTypes.bool,\n    debug: PropTypes.bool,\n    element: PropTypes.string,\n    className: PropTypes.string,\n    portalKey: PropTypes.string,\n    staggerConfig: PropTypes.object,\n    decisionData: PropTypes.any,\n    handleEnterUpdateDelete: PropTypes.func,\n    onComplete: PropTypes.func,\n    onStart: PropTypes.func\n  }\n}\n\nexport default Flipper\n","import React, {\n  FunctionComponent,\n  Children,\n  cloneElement,\n  ReactElement\n} from 'react'\nimport PropTypes from 'prop-types'\nimport { utilities, constants } from 'flip-toolkit'\nimport { FlippedProps, SerializableFlippedProps } from 'flip-toolkit/lib/types'\nimport { FlipContext, PortalContext } from '../Flipper/context'\n\nfunction isFunction(child: any): child is Function {\n  return typeof child === 'function'\n}\n\n// This wrapper creates child components for the main Flipper component\nexport const Flipped: FunctionComponent<SerializableFlippedProps> = ({\n  children,\n  flipId,\n  inverseFlipId,\n  portalKey,\n  ...rest\n}) => {\n  let child = children\n  const isFunctionAsChildren = isFunction(child)\n\n  if (!isFunctionAsChildren) {\n    try {\n      child = Children.only(children)\n    } catch (e) {\n      throw new Error('Each Flipped component must wrap a single child')\n    }\n  }\n\n  // if nothing is being animated, assume everything is being animated\n  if (!rest.scale && !rest.translate && !rest.opacity) {\n    utilities.assign(rest, {\n      translate: true,\n      scale: true,\n      opacity: true\n    })\n  }\n\n  const dataAttributes: Record<string, string | undefined> = {\n    [constants.DATA_FLIP_CONFIG]: JSON.stringify(rest)\n  }\n\n  if (flipId !== undefined)\n    dataAttributes[constants.DATA_FLIP_ID] = String(flipId)\n  else if (inverseFlipId)\n    dataAttributes[constants.DATA_INVERSE_FLIP_ID] = String(inverseFlipId)\n  if (portalKey !== undefined) {\n    dataAttributes[constants.DATA_PORTAL_KEY] = portalKey\n  }\n  if (isFunctionAsChildren) {\n    return (child as Function)(dataAttributes)\n  }\n  return cloneElement(child as ReactElement<any>, dataAttributes)\n}\n// @ts-ignore\nexport const FlippedWithContext: FunctionComponent<FlippedProps> = ({\n  children,\n  flipId,\n  shouldFlip,\n  shouldInvert,\n  onAppear,\n  onStart,\n  onStartImmediate,\n  onComplete,\n  onExit,\n  onSpringUpdate,\n  ...rest\n}) => {\n  if (!children) {\n    return null\n  }\n  if (rest.inverseFlipId) {\n    return <Flipped {...rest}>{children}</Flipped>\n  }\n\n  return (\n    <PortalContext.Consumer>\n      {portalKey => (\n        <FlipContext.Consumer>\n          {data => {\n            // if there is no surrounding Flipper component,\n            // we don't want to throw an error, so check\n            // that data exists and is not the default string\n            if (utilities.isObject(data) && flipId) {\n              data[flipId] = {\n                shouldFlip,\n                shouldInvert,\n                onAppear,\n                onStart,\n                onStartImmediate,\n                onComplete,\n                onExit,\n                onSpringUpdate\n              }\n            }\n            return (\n              <Flipped flipId={flipId} {...rest} portalKey={portalKey}>\n                {children}\n              </Flipped>\n            )\n          }}\n        </FlipContext.Consumer>\n      )}\n    </PortalContext.Consumer>\n  )\n}\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  FlippedWithContext.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    inverseFlipId: PropTypes.string,\n    flipId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    opacity: PropTypes.bool,\n    translate: PropTypes.bool,\n    scale: PropTypes.bool,\n    transformOrigin: PropTypes.string,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onStart: PropTypes.func,\n    onStartImmediate: PropTypes.func,\n    onComplete: PropTypes.func,\n    onAppear: PropTypes.func,\n    onSpringUpdate: PropTypes.func,\n    shouldFlip: PropTypes.func,\n    shouldInvert: PropTypes.func,\n    onExit: PropTypes.func,\n    portalKey: PropTypes.string,\n    stagger: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n  }\n}\n\nFlippedWithContext.displayName = 'Flipped'\n\nexport default FlippedWithContext\n","import { FunctionComponent, cloneElement, ReactElement } from 'react'\nimport { constants } from 'flip-toolkit'\n\nconst ExitContainer: FunctionComponent = ({ children }) => {\n  return cloneElement(children as ReactElement<any>, {\n    [constants.DATA_EXIT_CONTAINER]: true\n  })\n}\n\nexport default ExitContainer\n"]},"metadata":{},"sourceType":"module"}