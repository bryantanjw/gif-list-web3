{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/solana-gif-portal/app/src/components/GifPortal/index.js\",\n    _s = $RefreshSig$();\n\n/*\n * We are going to be using the useEffect hook!\n */\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"../../assets/twitter-logo.svg\";\nimport './styles.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json';\nimport { CheckIfWalletIsConnected } from '../utils/checkIfWalletIsConnected';\nimport { getGifList } from './components/getGifList';\nimport { renderNotConnectedContainer } from '../utils/renderNotConnectedContainer';\nimport { renderConnectedContainer } from '../utils/renderConnectedContainer'; // SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; // Change this up to be your Twitter if you want.\n\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://c.tenor.com/R9SJc2CDhXgAAAAM/taylor-swift.gif', 'https://media4.giphy.com/media/YJ627bD1Jtl2E/200.gif', 'https://media4.giphy.com/media/QZaOqI3JOYdnMTupXb/giphy.gif', 'https://media0.giphy.com/media/3ohBVbUzyTH3sWw1eU/giphy.gif'];\n\nconst GifPortal = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  /*\n  * When our component first mounts, let's check to see if we have a connected\n  * Phantom Wallet\n  */\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await CheckIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Solana GIF Portal (Taylor's Version)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View the Taylor Swift GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GifPortal, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = GifPortal;\nexport default GifPortal;\n\nvar _c;\n\n$RefreshReg$(_c, \"GifPortal\");","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/GifPortal/index.js"],"names":["React","useEffect","useState","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","kp","CheckIfWalletIsConnected","getGifList","renderNotConnectedContainer","renderConnectedContainer","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","GifPortal","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","onLoad","window","addEventListener","removeEventListener","console","log","twitterLogo"],"mappings":"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","sourcesContent":["/*\n * We are going to be using the useEffect hook!\n */\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"../../assets/twitter-logo.svg\";\nimport './styles.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json';\nimport { CheckIfWalletIsConnected } from '../utils/checkIfWalletIsConnected';\nimport { getGifList } from './components/getGifList';\nimport { renderNotConnectedContainer } from '../utils/renderNotConnectedContainer';\nimport { renderConnectedContainer } from '../utils/renderConnectedContainer';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Change this up to be your Twitter if you want.\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://c.tenor.com/R9SJc2CDhXgAAAAM/taylor-swift.gif',\n\t'https://media4.giphy.com/media/YJ627bD1Jtl2E/200.gif',\n\t'https://media4.giphy.com/media/QZaOqI3JOYdnMTupXb/giphy.gif',\n\t'https://media0.giphy.com/media/3ohBVbUzyTH3sWw1eU/giphy.gif'\n]\n\n\nconst GifPortal = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  /*\n  * When our component first mounts, let's check to see if we have a connected\n  * Phantom Wallet\n  */\n  useEffect(() => {\n    const onLoad = async () => {\n      await CheckIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 Solana GIF Portal (Taylor's Version)</p>\n          <p className=\"sub-text\">\n            View the Taylor Swift GIF collection in the metaverse ✨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GifPortal;"]},"metadata":{},"sourceType":"module"}