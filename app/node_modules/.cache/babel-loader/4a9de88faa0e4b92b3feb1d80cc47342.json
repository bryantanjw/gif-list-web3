{"ast":null,"code":"import { BaseWalletAdapter } from './adapter.mjs';\nimport { WalletError, WalletSendTransactionError } from './errors.mjs';\nexport class BaseSignerWalletAdapter extends BaseWalletAdapter {\n  async sendTransaction(transaction, connection) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let emit = true;\n\n    try {\n      try {\n        transaction.feePayer = transaction.feePayer || this.publicKey || undefined;\n        transaction.recentBlockhash = transaction.recentBlockhash || (await connection.getRecentBlockhash('finalized')).blockhash;\n        const {\n          signers,\n          ...sendOptions\n        } = options;\n        (signers === null || signers === void 0 ? void 0 : signers.length) && transaction.partialSign(...signers);\n        transaction = await this.signTransaction(transaction);\n        const rawTransaction = transaction.serialize();\n        return await connection.sendRawTransaction(rawTransaction, sendOptions);\n      } catch (error) {\n        // If the error was thrown by `signTransaction`, rethrow it and don't emit a duplicate event\n        if (error instanceof WalletError) {\n          emit = false;\n          throw error;\n        }\n\n        throw new WalletSendTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n      }\n    } catch (error) {\n      if (emit) {\n        this.emit('error', error);\n      }\n\n      throw error;\n    }\n  }\n\n}\nexport class BaseMessageSignerWalletAdapter extends BaseSignerWalletAdapter {}","map":{"version":3,"mappings":"AACA,SAASA,iBAAT,QAAyE,eAAzE;AACA,SAASC,WAAT,EAAsBC,0BAAtB,QAAwD,cAAxD;AASA,OAAM,MAAgBC,uBAAhB,SAAgDH,iBAAhD,CAAiE;AAC9C,QAAfI,eAAe,CACjBC,WADiB,EAEjBC,UAFiB,EAGmB;AAAA,QAApCC,OAAoC,uEAAF,EAAE;AAEpC,QAAIC,IAAI,GAAG,IAAX;;AACA,QAAI;AACA,UAAI;AACAH,mBAAW,CAACI,QAAZ,GAAuBJ,WAAW,CAACI,QAAZ,IAAwB,KAAKC,SAA7B,IAA0CC,SAAjE;AACAN,mBAAW,CAACO,eAAZ,GACIP,WAAW,CAACO,eAAZ,IAA+B,CAAC,MAAMN,UAAU,CAACO,kBAAX,CAA8B,WAA9B,CAAP,EAAmDC,SADtF;AAGA,cAAM;AAAEC,iBAAF;AAAW,aAAGC;AAAd,YAA8BT,OAApC;AAEA,gBAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEU,MAAT,KAAmBZ,WAAW,CAACa,WAAZ,CAAwB,GAAGH,OAA3B,CAAnB;AAEAV,mBAAW,GAAG,MAAM,KAAKc,eAAL,CAAqBd,WAArB,CAApB;AAEA,cAAMe,cAAc,GAAGf,WAAW,CAACgB,SAAZ,EAAvB;AAEA,eAAO,MAAMf,UAAU,CAACgB,kBAAX,CAA8BF,cAA9B,EAA8CJ,WAA9C,CAAb;AACH,OAdD,CAcE,OAAOO,KAAP,EAAmB;AACjB;AACA,YAAIA,KAAK,YAAYtB,WAArB,EAAkC;AAC9BO,cAAI,GAAG,KAAP;AACA,gBAAMe,KAAN;AACH;;AACD,cAAM,IAAIrB,0BAAJ,CAA+BqB,KAAK,SAAL,SAAK,WAAL,GAAK,MAAL,QAAK,CAAEC,OAAtC,EAA+CD,KAA/C,CAAN;AACH;AACJ,KAvBD,CAuBE,OAAOA,KAAP,EAAmB;AACjB,UAAIf,IAAJ,EAAU;AACN,aAAKA,IAAL,CAAU,OAAV,EAAmBe,KAAnB;AACH;;AACD,YAAMA,KAAN;AACH;AACJ;;AApCkE;AAgDvE,OAAM,MAAgBE,8BAAhB,SACMtB,uBADN,CAC6B","names":["BaseWalletAdapter","WalletError","WalletSendTransactionError","BaseSignerWalletAdapter","sendTransaction","transaction","connection","options","emit","feePayer","publicKey","undefined","recentBlockhash","getRecentBlockhash","blockhash","signers","sendOptions","length","partialSign","signTransaction","rawTransaction","serialize","sendRawTransaction","error","message","BaseMessageSignerWalletAdapter"],"sourceRoot":"","sources":["../../src/signer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}