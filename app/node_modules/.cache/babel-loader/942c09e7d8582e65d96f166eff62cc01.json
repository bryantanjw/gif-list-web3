{"ast":null,"code":"import { getProvider } from \"../../utils/getProvider\";\nimport idl from '../idl.json';\nimport { Program } from '@project-serum/anchor';\nimport { getGifList } from \"./getGifList\";\nexport const upvoteGif = async (programID, baseAccount, id) => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    await program.rpc.upvoteGif(id, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey\n      }\n    });\n    await getGifList(programID, baseAccount, setGifList);\n  } catch (error) {\n    console.log('Error Upvoting GifID: ', id, error);\n  }\n};","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/upvoteGif.js"],"names":["getProvider","idl","Program","getGifList","upvoteGif","programID","baseAccount","id","provider","program","rpc","accounts","publicKey","user","wallet","setGifList","error","console","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,yBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,SAAS,GAAG,OAAOC,SAAP,EAAkBC,WAAlB,EAA+BC,EAA/B,KAAsC;AAC3D,MAAI;AACF,UAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,UAAMS,OAAO,GAAG,IAAIP,OAAJ,CAAYD,GAAZ,EAAiBI,SAAjB,EAA4BG,QAA5B,CAAhB;AAEA,UAAMC,OAAO,CAACC,GAAR,CAAYN,SAAZ,CAAsBG,EAAtB,EAA0B;AAC9BI,MAAAA,QAAQ,EAAE;AACRL,QAAAA,WAAW,EAAEA,WAAW,CAACM,SADjB;AAERC,QAAAA,IAAI,EAAEL,QAAQ,CAACM,MAAT,CAAgBF;AAFd;AADoB,KAA1B,CAAN;AAMA,UAAMT,UAAU,CAACE,SAAD,EAAYC,WAAZ,EAAyBS,UAAzB,CAAhB;AACD,GAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCX,EAAtC,EAA0CS,KAA1C;AACD;AACJ,CAfM","sourcesContent":["import { getProvider } from \"../../utils/getProvider\";\nimport idl from '../idl.json';\nimport { Program } from '@project-serum/anchor';\nimport { getGifList } from \"./getGifList\";\n\nexport const upvoteGif = async (programID, baseAccount, id) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.upvoteGif(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      await getGifList(programID, baseAccount, setGifList);\n    } catch (error) {\n      console.log('Error Upvoting GifID: ', id, error);\n    }\n};"]},"metadata":{},"sourceType":"module"}