{"ast":null,"code":"var _s = $RefreshSig$();\n\n/*\n* This function holds the logic for deciding if a Phantom Wallet is\n* connected or not\n*/\nexport const CheckIfWalletIsConnected = async () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  try {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      if (solana.isPhantom) {\n        console.log('Phantom wallet found!');\n        /*\n        * The solana object gives us a function that will allow us to connect\n        * directly with the user's wallet!\n        */\n\n        const response = await solana.connect({\n          onlyIfTrusted: true\n        });\n        console.log('Connected with Public Key:', response.publicKey.toString());\n        /*\n        * Set the user's publicKey in state to be used later!\n        */\n\n        setWalletAddress(response.publicKey.toString()); // return response.publicKey.toString()\n      }\n    } else {\n      alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\n_s(CheckIfWalletIsConnected, \"gink3R2wQZ2Qgh5fc9oQ+ykQXc4=\");\n\n_c = CheckIfWalletIsConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckIfWalletIsConnected\");","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/utils/checkIfWalletIsConnected.js"],"names":["CheckIfWalletIsConnected","walletAddress","setWalletAddress","useState","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error"],"mappings":";;AAAA;AACA;AACA;AACA;AAEA,OAAO,MAAMA,wBAAwB,GAAG,YAAY;AAAA;;AAChD;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCC,QAAQ,CAAC,IAAD,CAAlD;;AAEA,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaC,MAAnB;;AAEA,QAAID,MAAJ,EAAY;AACR,UAAIA,MAAM,CAACE,SAAX,EAAsB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEA;AAChB;AACA;AACA;;AACgB,cAAMC,QAAQ,GAAG,MAAML,MAAM,CAACM,OAAP,CAAe;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SAAf,CAAvB;AACAJ,QAAAA,OAAO,CAACC,GAAR,CACA,4BADA,EAEAC,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAFA;AAKA;AAChB;AACA;;AACgBX,QAAAA,gBAAgB,CAACO,QAAQ,CAACG,SAAT,CAAmBC,QAAnB,EAAD,CAAhB,CAhBkB,CAiBlB;AACH;AACJ,KApBD,MAoBO;AACPC,MAAAA,KAAK,CAAC,kDAAD,CAAL;AACC;AACJ,GA1BD,CA0BE,OAAOC,KAAP,EAAc;AACZR,IAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACH;AACJ,CAjCM;;GAAMf,wB;;KAAAA,wB","sourcesContent":["/*\n* This function holds the logic for deciding if a Phantom Wallet is\n* connected or not\n*/\n\nexport const CheckIfWalletIsConnected = async () => {\n    // State\n    const [walletAddress, setWalletAddress] = useState(null);\n\n    try {\n        const { solana } = window;\n\n        if (solana) {\n            if (solana.isPhantom) {\n                console.log('Phantom wallet found!');\n\n                /*\n                * The solana object gives us a function that will allow us to connect\n                * directly with the user's wallet!\n                */\n                const response = await solana.connect({ onlyIfTrusted: true });\n                console.log(\n                'Connected with Public Key:',\n                response.publicKey.toString()\n                );\n\n                /*\n                * Set the user's publicKey in state to be used later!\n                */\n                setWalletAddress(response.publicKey.toString());\n                // return response.publicKey.toString()\n            }\n        } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};"]},"metadata":{},"sourceType":"module"}