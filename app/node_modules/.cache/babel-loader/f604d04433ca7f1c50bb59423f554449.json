{"ast":null,"code":"import { getProvider } from \"../../utils/getProvider\";\nimport idl from '../idl.json';\nimport { Program } from '@project-serum/anchor';\nimport { getGifList } from \"./getGifList\";\nexport const upvoteGif = async (programID, baseAccount, setGifList, id) => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"GifID >>>\", id);\n    await program.rpc.upvoteGif(id, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey\n      }\n    });\n    await getGifList(programID, baseAccount, setGifList, id);\n  } catch (error) {\n    console.log('Error Upvoting GifID: ', id, error);\n  }\n};","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/upvoteGif.js"],"names":["getProvider","idl","Program","getGifList","upvoteGif","programID","baseAccount","setGifList","id","provider","program","console","log","rpc","accounts","publicKey","user","wallet","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,yBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,MAAMC,SAAS,GAAG,OAAOC,SAAP,EAAkBC,WAAlB,EAA+BC,UAA/B,EAA2CC,EAA3C,KAAkD;AACzE,MAAI;AACF,UAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,UAAMU,OAAO,GAAG,IAAIR,OAAJ,CAAYD,GAAZ,EAAiBI,SAAjB,EAA4BI,QAA5B,CAAhB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,EAAzB;AAEA,UAAME,OAAO,CAACG,GAAR,CAAYT,SAAZ,CAAsBI,EAAtB,EAA0B;AAC9BM,MAAAA,QAAQ,EAAE;AACRR,QAAAA,WAAW,EAAEA,WAAW,CAACS,SADjB;AAERC,QAAAA,IAAI,EAAEP,QAAQ,CAACQ,MAAT,CAAgBF;AAFd;AADoB,KAA1B,CAAN;AAMA,UAAMZ,UAAU,CAACE,SAAD,EAAYC,WAAZ,EAAyBC,UAAzB,EAAqCC,EAArC,CAAhB;AACD,GAZD,CAYE,OAAOU,KAAP,EAAc;AACdP,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCJ,EAAtC,EAA0CU,KAA1C;AACD;AACF,CAhBM","sourcesContent":["import { getProvider } from \"../../utils/getProvider\";\nimport idl from '../idl.json';\nimport { Program } from '@project-serum/anchor';\nimport { getGifList } from \"./getGifList\";\n\nexport const upvoteGif = async (programID, baseAccount, setGifList, id) => {\n  try {\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    console.log(\"GifID >>>\", id);\n\n    await program.rpc.upvoteGif(id, {\n      accounts: {\n        baseAccount: baseAccount.publicKey,\n        user: provider.wallet.publicKey,\n      },\n    });\n    await getGifList(programID, baseAccount, setGifList, id);\n  } catch (error) {\n    console.log('Error Upvoting GifID: ', id, error);\n  }\n};"]},"metadata":{},"sourceType":"module"}