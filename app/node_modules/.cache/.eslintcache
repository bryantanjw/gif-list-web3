[{"/Users/bryan/solana-gif-portal/app/src/index.js":"1","/Users/bryan/solana-gif-portal/app/src/components/App/App.js":"2","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/index.js":"3","/Users/bryan/solana-gif-portal/app/src/components/Header/index.js":"4","/Users/bryan/solana-gif-portal/app/src/components/Landing/index.js":"5","/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/index.js":"6","/Users/bryan/solana-gif-portal/app/src/components/Header/AnimatedNavbar.js":"7","/Users/bryan/solana-gif-portal/app/src/components/Landing/utils/AppRoute.js":"8","/Users/bryan/solana-gif-portal/app/src/components/Landing/layouts/LayoutDefault.js":"9","/Users/bryan/solana-gif-portal/app/src/components/Landing/utils/ScrollReveal.js":"10","/Users/bryan/solana-gif-portal/app/src/components/Landing/views/Home.js":"11","/Users/bryan/solana-gif-portal/app/src/components/Header/Navbar/NavbarItem.js":"12","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/DevelopersDropdown.js":"13","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/CompanyDropdown.js":"14","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/ProductsDropdown.js":"15","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/Footer.js":"16","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/Header.js":"17","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/Hero.js":"18","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/Cta.js":"19","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/FeaturesTiles.js":"20","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/FeaturesSplit.js":"21","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/Testimonial.js":"22","/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/index.js":"23","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/Components.js":"24","/Users/bryan/solana-gif-portal/app/src/components/Header/Navbar/index.js":"25","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/index.js":"26","/Users/bryan/solana-gif-portal/app/src/components/Landing/utils/SectionProps.js":"27","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/partials/Logo.js":"28","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/partials/FooterNav.js":"29","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/partials/FooterSocial.js":"30","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/ButtonGroup.js":"31","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Modal.js":"32","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Image.js":"33","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Button.js":"34","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Input.js":"35","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/partials/SectionHeader.js":"36","/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/connection.js":"37","/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/helpers.js":"38","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/FadeContents.js":"39","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/Components.js":"40","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/FormLabel.js":"41","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/FormHint.js":"42","/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CountdownTimer/index.js":"43","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/utils.js":"44","/Users/bryan/solana-gif-portal/app/src/components/utils/checkIfWalletIsConnected.js":"45","/Users/bryan/solana-gif-portal/app/src/components/utils/connectWallet.js":"46","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/sendGif.js":"47","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/getGifList.js":"48","/Users/bryan/solana-gif-portal/app/src/components/utils/getProvider.js":"49","/Users/bryan/solana-gif-portal/app/src/components/utils/renderNotConnectedContainer.js":"50","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/renderConnectedContainer.js":"51","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/createGifAccount.js":"52","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/upvoteGif.js":"53"},{"size":233,"mtime":1646805952911,"results":"54","hashOfConfig":"55"},{"size":648,"mtime":1647077011588,"results":"56","hashOfConfig":"55"},{"size":3449,"mtime":1647077293167,"results":"57","hashOfConfig":"55"},{"size":504,"mtime":1647076609088,"results":"58","hashOfConfig":"55"},{"size":888,"mtime":1647076837008,"results":"59","hashOfConfig":"55"},{"size":1896,"mtime":1647077217937,"results":"60","hashOfConfig":"55"},{"size":3061,"mtime":1647081532245,"results":"61","hashOfConfig":"55"},{"size":457,"mtime":1646970215771,"results":"62","hashOfConfig":"55"},{"size":362,"mtime":1647076938121,"results":"63","hashOfConfig":"55"},{"size":2534,"mtime":1646967690916,"results":"64","hashOfConfig":"55"},{"size":756,"mtime":1647077709256,"results":"65","hashOfConfig":"55"},{"size":1569,"mtime":1646964306455,"results":"66","hashOfConfig":"55"},{"size":1954,"mtime":1647081636537,"results":"67","hashOfConfig":"55"},{"size":1397,"mtime":1647081622490,"results":"68","hashOfConfig":"55"},{"size":1382,"mtime":1647081734529,"results":"69","hashOfConfig":"55"},{"size":1338,"mtime":1647081184017,"results":"70","hashOfConfig":"55"},{"size":3685,"mtime":1646967659299,"results":"71","hashOfConfig":"55"},{"size":3300,"mtime":1647077618042,"results":"72","hashOfConfig":"55"},{"size":1799,"mtime":1646968341376,"results":"73","hashOfConfig":"55"},{"size":7750,"mtime":1646972166176,"results":"74","hashOfConfig":"55"},{"size":5670,"mtime":1647080668364,"results":"75","hashOfConfig":"55"},{"size":4566,"mtime":1646967676388,"results":"76","hashOfConfig":"55"},{"size":12943,"mtime":1646809921923,"results":"77","hashOfConfig":"55"},{"size":821,"mtime":1646837140029,"results":"78","hashOfConfig":"55"},{"size":489,"mtime":1647075741083,"results":"79","hashOfConfig":"55"},{"size":3538,"mtime":1646837246366,"results":"80","hashOfConfig":"55"},{"size":1226,"mtime":1646967690916,"results":"81","hashOfConfig":"55"},{"size":606,"mtime":1646972214473,"results":"82","hashOfConfig":"55"},{"size":650,"mtime":1646967662905,"results":"83","hashOfConfig":"55"},{"size":1674,"mtime":1647081064307,"results":"84","hashOfConfig":"55"},{"size":296,"mtime":1646967524399,"results":"85","hashOfConfig":"55"},{"size":2640,"mtime":1646967606557,"results":"86","hashOfConfig":"55"},{"size":1755,"mtime":1646967580372,"results":"87","hashOfConfig":"55"},{"size":1022,"mtime":1646967449401,"results":"88","hashOfConfig":"55"},{"size":2205,"mtime":1646967592521,"results":"89","hashOfConfig":"55"},{"size":1228,"mtime":1646967676389,"results":"90","hashOfConfig":"55"},{"size":12897,"mtime":1646809921921,"results":"91","hashOfConfig":"55"},{"size":3146,"mtime":1646809921921,"results":"92","hashOfConfig":"55"},{"size":1241,"mtime":1646837231954,"results":"93","hashOfConfig":"55"},{"size":1983,"mtime":1646958165149,"results":"94","hashOfConfig":"55"},{"size":700,"mtime":1646967570651,"results":"95","hashOfConfig":"55"},{"size":619,"mtime":1646967557830,"results":"96","hashOfConfig":"55"},{"size":1771,"mtime":1646809921925,"results":"97","hashOfConfig":"55"},{"size":263,"mtime":1646837263223,"results":"98","hashOfConfig":"55"},{"size":1213,"mtime":1647073072488,"results":"99","hashOfConfig":"55"},{"size":375,"mtime":1647069645882,"results":"100","hashOfConfig":"55"},{"size":953,"mtime":1647006331754,"results":"101","hashOfConfig":"55"},{"size":719,"mtime":1647060449048,"results":"102","hashOfConfig":"55"},{"size":565,"mtime":1646999617649,"results":"103","hashOfConfig":"55"},{"size":363,"mtime":1647073194876,"results":"104","hashOfConfig":"55"},{"size":2396,"mtime":1647059643994,"results":"105","hashOfConfig":"55"},{"size":963,"mtime":1647005525462,"results":"106","hashOfConfig":"55"},{"size":694,"mtime":1647059372860,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1n3mym0",{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"110"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"110"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"110"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"/Users/bryan/solana-gif-portal/app/src/index.js",[],["230","231"],"/Users/bryan/solana-gif-portal/app/src/components/App/App.js",["232"],"import React from 'react';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nimport Header from '../Header';\nimport GifPortal from '../GifPortal';\nimport NftDrop from '../NftDrop/app/src';\nimport Landing from '../Landing';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <BrowserRouter>\n      <div>\n      {/* <Header /> */}\n      <Routes>\n        <Route path=\"/*\" element={<Landing />} />\n        <Route path=\"portal\" element={<GifPortal />} />\n        <Route path=\"nfts\" element={<NftDrop />} />\n      </Routes>\n      </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/bryan/solana-gif-portal/app/src/components/GifPortal/index.js",["233","234","235"],"/*\n * We are going to be using the useEffect hook!\n */\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"../../assets/twitter-logo.svg\";\nimport './styles.css';\nimport idl from './idl.json';\nimport { PublicKey } from '@solana/web3.js';\nimport { web3 } from '@project-serum/anchor';\nimport kp from './keypair.json';\nimport { CheckIfWalletIsConnected } from '../utils/checkIfWalletIsConnected';\nimport { getGifList } from './components/getGifList';\nimport { renderNotConnectedContainer } from '../utils/renderNotConnectedContainer';\nimport { RenderConnectedContainer } from './components/renderConnectedContainer';\n\nimport Header from '../Header';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Change this up to be your Twitter if you want.\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://c.tenor.com/R9SJc2CDhXgAAAAM/taylor-swift.gif',\n\t'https://media4.giphy.com/media/YJ627bD1Jtl2E/200.gif',\n\t'https://media4.giphy.com/media/QZaOqI3JOYdnMTupXb/giphy.gif',\n\t'https://media0.giphy.com/media/3ohBVbUzyTH3sWw1eU/giphy.gif'\n]\n\n\nconst GifPortal = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState(null);\n\n  /*\n  * When our component first mounts, let's check to see if we have a connected\n  * Phantom Wallet\n  */\n  useEffect(() => {\n    const onLoad = async () => {\n      await CheckIfWalletIsConnected(setWalletAddress);\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList(programID, baseAccount, setGifList)\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 Solana GIF Portal (Taylor's Version)</p>\n          <p className=\"sub-text\">\n            View the Taylor Swift GIF collection in the metaverse ✨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer(setWalletAddress)}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && <RenderConnectedContainer inputValue={inputValue} setInputValue={setInputValue} gifList={gifList} setGifList={setGifList} programID={programID} baseAccount={baseAccount} />}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GifPortal;","/Users/bryan/solana-gif-portal/app/src/components/Header/index.js",["236","237"],"import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AnimatedNavbar from \"./AnimatedNavbar\";\nimport styled from \"styled-components\";\nimport \"./styles.css\";\nimport \"normalize.css\";\n\nclass Header extends Component {\n  state = { duration: 300 };\n\n  onChange = data => {\n      this.setState(data);\n  };\n  \n  render() {\n    return (\n      <div className=\"AppContainer\">\n        <AnimatedNavbar duration={this.state.duration} />\n      </div>\n    );\n  };\n};\n\nexport default Header;","/Users/bryan/solana-gif-portal/app/src/components/Landing/index.js",["238","239"],"import React, { useRef, useEffect } from 'react';\nimport { useLocation, Routes } from 'react-router-dom';\nimport AppRoute from './utils/AppRoute';\nimport ScrollReveal from './utils/ScrollReveal';\nimport './assets/css/style.css';\n// import ReactGA from 'react-ga';\n\n// Layouts\nimport LayoutDefault from './layouts/LayoutDefault';\n\n// Views \nimport Home from './views/Home';\n\nconst Landing = () => {\n\n  const childRef = useRef();\n  let location = useLocation();\n\n  useEffect(() => {\n    const page = location.pathname;\n    document.body.classList.add('is-loaded')\n    childRef.current.init();\n    // trackPage(page);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n\n  return (\n    <ScrollReveal\n      ref={childRef}\n      children={() => (\n          <AppRoute path=\"\" element={<Home />} layout={<LayoutDefault />} />\n      )} />\n  );\n}\n\nexport default Landing;","/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/index.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Header/AnimatedNavbar.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/utils/AppRoute.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/layouts/LayoutDefault.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/utils/ScrollReveal.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/views/Home.js",["240","241","242"],"import React from 'react';\n// import sections\nimport Hero from '../components/sections/Hero';\nimport FeaturesTiles from '../components/sections/FeaturesTiles';\nimport FeaturesSplit from '../components/sections/FeaturesSplit';\nimport Testimonial from '../components/sections/Testimonial';\nimport Cta from '../components/sections/Cta';\nimport Footer from '../components/layout/Footer';\n\nconst Home = () => {\n\n  return (\n    <div className='HomeContainer'>\n      <Hero className=\"illustration-section-01\" />\n      {/* <FeaturesTiles /> */}\n      <FeaturesSplit invertMobile topDivider imageFill className=\"illustration-section-02\" />\n      {/* <Testimonial topDivider /> */}\n      {/* <Cta split /> */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default Home;","/Users/bryan/solana-gif-portal/app/src/components/Header/Navbar/NavbarItem.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/DevelopersDropdown.js",["243","244","245","246"],"import React from \"react\"\nimport styled from \"styled-components\"\nimport {\n  Icon,\n  DropdownSection,\n  Heading,\n  HeadingLink,\n  LinkList\n} from \"./Components\"\n\nconst DevelopersDropdownEl = styled.div`\n  width: 25rem;\n`\n\nconst Flex = styled.div`\n  display: flex;\n  > div:first-of-type {\n    margin-right: 48px;\n  }\n`\n\nconst DevelopersDropdown = () => {\n  return (\n    <DevelopersDropdownEl>\n      <DropdownSection data-first-dropdown-section>\n        <div>\n          <Heading>View GIFs</Heading>\n          <p>View, upload, and upvote GIFs</p>\n          {/* <Flex>\n            <div>\n              <h4>Get Started</h4>\n              <LinkList>\n                <li>\n                  <a href=\"/\">Elements</a>\n                </li>\n                <li>\n                  <a href=\"/\">Checkout</a>\n                </li>\n                <li>\n                  <a href=\"/\">Mobile apps</a>\n                </li>\n              </LinkList>\n            </div>\n            <div>\n              <h4>Popular Topics</h4>\n              <LinkList>\n                <li>\n                  <a href=\"/\">Apple Pay</a>\n                </li>\n                <li>\n                  <a href=\"/\">Testing</a>\n                </li>\n                <li>\n                  <a href=\"/\">Launch Checklist</a>\n                </li>\n              </LinkList>\n            </div>\n          </Flex> */}\n        </div>\n      </DropdownSection>\n      {/* <DropdownSection>\n        <ul>\n          <HeadingLink>\n            <a href=\"/\">\n              <Icon /> Full API Reference\n            </a>\n          </HeadingLink>\n          <HeadingLink>\n            <a href=\"/\">\n              <Icon /> API Status\n            </a>\n          </HeadingLink>\n          <HeadingLink noMarginBottom>\n            <a href=\"/\">\n              <Icon /> Open Source\n            </a>\n          </HeadingLink>\n        </ul>\n      </DropdownSection> */}\n    </DevelopersDropdownEl>\n  )\n}\n\nexport default DevelopersDropdown;","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/CompanyDropdown.js",["247","248","249"],"import React from \"react\"\nimport styled from \"styled-components\"\nimport {\n  Heading,\n  HeadingLink,\n  LinkList,\n  DropdownSection,\n  Icon\n} from \"./Components\"\n\nconst CompanyDropdownEl = styled.div`\n  width: 18.5rem;\n`\n\nconst CompanyDropdown = () => {\n  return (\n    <CompanyDropdownEl>\n      <DropdownSection data-first-dropdown-section>\n        <div>\n          <Heading>Mint NFTs</Heading>\n          <p>A collection of 10 generative NFTs from album covers up for grabs</p>\n          {/* <Flex>\n            <div>\n              <h4>Get Started</h4>\n              <LinkList>\n                <li>\n                  <a href=\"/\">Elements</a>\n                </li>\n                <li>\n                  <a href=\"/\">Checkout</a>\n                </li>\n                <li>\n                  <a href=\"/\">Mobile apps</a>\n                </li>\n              </LinkList>\n            </div>\n            <div>\n              <h4>Popular Topics</h4>\n              <LinkList>\n                <li>\n                  <a href=\"/\">Apple Pay</a>\n                </li>\n                <li>\n                  <a href=\"/\">Testing</a>\n                </li>\n                <li>\n                  <a href=\"/\">Launch Checklist</a>\n                </li>\n              </LinkList>\n            </div>\n          </Flex> */}\n        </div>\n      </DropdownSection>\n    </CompanyDropdownEl>\n  )\n}\n\nexport default CompanyDropdown;","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/ProductsDropdown.js",["250","251","252","253","254","255","256"],"import React from \"react\"\nimport styled from \"styled-components\"\nimport { Icon, DropdownSection, Heading } from \"./Components\"\n\nconst ProductsDropdownEl = styled.div`\n  width: 30rem;\n`\n\nconst Logo = styled.div`\n  width: 38px;\n  height: 38px;\n  margin-right: 16px;\n  border-radius: 100%;\n  opacity: 0.6;\n  background-color: ${({ color }) => `var(--${color})`};\n`\n\nconst SubProductsList = styled.ul`\n  li {\n    display: flex;\n    margin-bottom: 1rem;\n  }\n  h3 {\n    margin-right: 1rem;\n    width: 3.2rem;\n    display: block;\n  }\n  a {\n    color: var(--dark-grey);\n  }\n`\n\nconst ProductsSection = styled.ul`\n  li {\n    display: flex;\n  }\n`\n\nconst WorksWithStripe = styled.div`\n border-top: 2px solid #fff;\n  display:flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: var(--spacer);\n  padding-top: var(--spacer);\n}\nh3 {\n  margin-bottom: 0;\n}\n`\n\nconst ProductsDropdown = () => {\n  return (\n    <ProductsDropdownEl>\n      {/* <DropdownSection data-first-dropdown-section>\n        <div>\n          <Heading>Portal</Heading>\n          <p>View, upload, and upvote GIFs</p>\n        </div>\n        <WorksWithStripe>\n          <Heading noMarginBottom>\n            <a href=\"/\">\n              <Icon /> Works with Stripe\n            </a>\n          </Heading>\n        </WorksWithStripe>\n      </DropdownSection> */}\n    </ProductsDropdownEl>\n  )\n}\n\nexport default ProductsDropdown;","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/Footer.js",["257","258"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Logo from './partials/Logo';\nimport FooterNav from './partials/FooterNav';\nimport FooterSocial from './partials/FooterSocial';\n\nconst propTypes = {\n  topOuterDivider: PropTypes.bool,\n  topDivider: PropTypes.bool\n}\n\nconst defaultProps = {\n  topOuterDivider: false,\n  topDivider: false\n}\n\nconst Footer = ({\n  className,\n  topOuterDivider,\n  topDivider,\n  ...props\n}) => {\n\n  const classes = classNames(\n    'site-footer center-content-mobile',\n    topOuterDivider && 'has-top-divider',\n    className\n  );\n\n  return (\n    <footer\n      {...props}\n      className={classes}\n    >\n      <div className=\"container footer-container\">\n        <div className={\n          classNames(\n            'site-footer-inner',\n            topDivider && 'has-top-divider'\n          )}>\n          <div className=\"footer-top space-between text-xxs\">\n            {/* <Logo /> */}\n            <FooterSocial />\n          </div>\n          <div className=\"footer-bottom space-between text-xxs invert-order-desktop\">\n            <div className=\"footer-copyright\">Made by Bryan. All rights reserved</div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n\nFooter.propTypes = propTypes;\nFooter.defaultProps = defaultProps;\n\nexport default Footer;","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/Header.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/Hero.js",["259","260","261","262","263"],"import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { SectionProps } from '../../utils/SectionProps';\nimport ButtonGroup from '../elements/ButtonGroup';\nimport Button from '../elements/Button';\nimport Image from '../elements/Image';\nimport Modal from '../elements/Modal';\n\nconst propTypes = {\n  ...SectionProps.types\n}\n\nconst defaultProps = {\n  ...SectionProps.defaults\n}\n\nconst Hero = ({\n  className,\n  topOuterDivider,\n  bottomOuterDivider,\n  topDivider,\n  bottomDivider,\n  hasBgColor,\n  invertColor,\n  ...props\n}) => {\n\n  const [videoModalActive, setVideomodalactive] = useState(false);\n\n  const openModal = (e) => {\n    e.preventDefault();\n    setVideomodalactive(true);\n  }\n\n  const closeModal = (e) => {\n    e.preventDefault();\n    setVideomodalactive(false);\n  }   \n\n  const outerClasses = classNames(\n    'hero section center-content',\n    topOuterDivider && 'has-top-divider',\n    bottomOuterDivider && 'has-bottom-divider',\n    hasBgColor && 'has-bg-color',\n    invertColor && 'invert-color',\n    className\n  );\n\n  const innerClasses = classNames(\n    'hero-inner section-inner',\n    topDivider && 'has-top-divider',\n    bottomDivider && 'has-bottom-divider'\n  );\n\n  return (\n    <section\n      {...props}\n      className={outerClasses}\n    >\n      <div className=\"container-sm\">\n        <div className={innerClasses}>\n          <div className=\"hero-content\">\n            <h1 className=\"mt-0 mb-16 reveal-from-bottom\" data-reveal-delay=\"200\">\n            <span className=\"text-color-primary\">Solana</span> GIF Portal\n            </h1>\n            <div className=\"container-xs\">\n              <h2 className=\"m-0 mb-32 reveal-from-bottom\" data-reveal-delay=\"400\">\n              View the Taylor Swift GIF collection in the metaverse and mint NFTs ✨\n                </h2>\n              <div className=\"reveal-from-bottom\" data-reveal-delay=\"600\">\n                <ButtonGroup className=\"landing-button\">\n                  <Button tag=\"a\" color=\"primary\" wideMobile href=\"/portal\">\n                    Launch App\n                    </Button>\n                  <Button tag=\"a\" color=\"dark\" wideMobile href=\"https://github.com/bryantanjw/solana-gif-portal\">\n                    View on Github\n                    </Button>\n                </ButtonGroup>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"hero-figure reveal-from-bottom illustration-element-01\" data-reveal-value=\"20px\" data-reveal-delay=\"800\">\n            <a\n              data-video=\"https://player.vimeo.com/video/174002812\"\n              href=\"#0\"\n              aria-controls=\"video-modal\"\n              onClick={openModal}\n            >\n              <Image\n                className=\"has-shadow\"\n                src={require('./../../assets/images/video-placeholder.jpg').default}\n                alt=\"Hero\"\n                width={896}\n                height={504} />\n            </a>\n          </div>\n          <Modal\n            id=\"video-modal\"\n            show={videoModalActive}\n            handleClose={closeModal}\n            video=\"https://player.vimeo.com/video/174002812\"\n            videoTag=\"iframe\" /> */}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nHero.propTypes = propTypes;\nHero.defaultProps = defaultProps;\n\nexport default Hero;","/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/Cta.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/FeaturesTiles.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/FeaturesSplit.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/Testimonial.js",[],"/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/index.js",["264"],"import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { sendTransactions } from './connection';\nimport './CandyMachine.css';\nimport CountdownTimer from '../CountdownTimer';\n\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  CIVIC\n} from './helpers';\n\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst CandyMachine = ({ walletAddress }) => {\n  // Add state property inside your component like this\n  const [candyMachine, setCandyMachine] = useState(null);\n\n  const getCandyMachineCreator = async (candyMachine) => {\n    const candyMachineID = new PublicKey(candyMachine);\n    return await web3.PublicKey.findProgramAddress(\n        [Buffer.from('candy_machine'), candyMachineID.toBuffer()],\n        candyMachineProgram,\n    );\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n  \n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const mintToken = async () => {\n    const mint = web3.Keypair.generate();\n\n    const userTokenAccountAddress = (\n      await getAtaForMint(mint.publicKey, walletAddress.publicKey)\n    )[0];\n  \n    const userPayingAccountAddress = candyMachine.state.tokenMint\n      ? (await getAtaForMint(candyMachine.state.tokenMint, walletAddress.publicKey))[0]\n      : walletAddress.publicKey;\n  \n    const candyMachineAddress = candyMachine.id;\n    const remainingAccounts = [];\n    const signers = [mint];\n    const cleanupInstructions = [];\n    const instructions = [\n      web3.SystemProgram.createAccount({\n        fromPubkey: walletAddress.publicKey,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports:\n          await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n            MintLayout.span,\n          ),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n      ),\n      createAssociatedTokenAccountInstruction(\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        walletAddress.publicKey,\n        mint.publicKey,\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        userTokenAccountAddress,\n        walletAddress.publicKey,\n        [],\n        1,\n      ),\n    ];\n  \n    if (candyMachine.state.gatekeeper) {\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkToken(\n            walletAddress.publicKey,\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: true,\n        isSigner: false,\n      });\n      if (candyMachine.state.gatekeeper.expireOnUse) {\n        remainingAccounts.push({\n          pubkey: CIVIC,\n          isWritable: false,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: (\n            await getNetworkExpire(\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            )\n          )[0],\n          isWritable: false,\n          isSigner: false,\n        });\n      }\n    }\n    if (candyMachine.state.whitelistMintSettings) {\n      const mint = new web3.PublicKey(\n        candyMachine.state.whitelistMintSettings.mint,\n      );\n  \n      const whitelistToken = (await getAtaForMint(mint, walletAddress.publicKey))[0];\n      remainingAccounts.push({\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      });\n  \n      if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n        const whitelistBurnAuthority = web3.Keypair.generate();\n  \n        remainingAccounts.push({\n          pubkey: mint,\n          isWritable: true,\n          isSigner: false,\n        });\n        remainingAccounts.push({\n          pubkey: whitelistBurnAuthority.publicKey,\n          isWritable: false,\n          isSigner: true,\n        });\n        signers.push(whitelistBurnAuthority);\n        const exists =\n          await candyMachine.program.provider.connection.getAccountInfo(\n            whitelistToken,\n          );\n        if (exists) {\n          instructions.push(\n            Token.createApproveInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              whitelistBurnAuthority.publicKey,\n              walletAddress.publicKey,\n              [],\n              1,\n            ),\n          );\n          cleanupInstructions.push(\n            Token.createRevokeInstruction(\n              TOKEN_PROGRAM_ID,\n              whitelistToken,\n              walletAddress.publicKey,\n              [],\n            ),\n          );\n        }\n      }\n    }\n  \n    if (candyMachine.state.tokenMint) {\n      const transferAuthority = web3.Keypair.generate();\n  \n      signers.push(transferAuthority);\n      remainingAccounts.push({\n        pubkey: userPayingAccountAddress,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: transferAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n  \n      instructions.push(\n        Token.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          transferAuthority.publicKey,\n          walletAddress.publicKey,\n          [],\n          candyMachine.state.price.toNumber(),\n        ),\n      );\n      cleanupInstructions.push(\n        Token.createRevokeInstruction(\n          TOKEN_PROGRAM_ID,\n          userPayingAccountAddress,\n          walletAddress.publicKey,\n          [],\n        ),\n      );\n    }\n    const metadataAddress = await getMetadata(mint.publicKey);\n    const masterEdition = await getMasterEdition(mint.publicKey);\n  \n    const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n      candyMachineAddress,\n    );\n  \n    instructions.push(\n      await candyMachine.program.instruction.mintNft(creatorBump, {\n        accounts: {\n          candyMachine: candyMachineAddress,\n          candyMachineCreator,\n          payer: walletAddress.publicKey,\n          wallet: candyMachine.state.treasury,\n          mint: mint.publicKey,\n          metadata: metadataAddress,\n          masterEdition,\n          mintAuthority: walletAddress.publicKey,\n          updateAuthority: walletAddress.publicKey,\n          tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n          rent: web3.SYSVAR_RENT_PUBKEY,\n          clock: web3.SYSVAR_CLOCK_PUBKEY,\n          recentBlockhashes: web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          instructionSysvarAccount: web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        remainingAccounts:\n          remainingAccounts.length > 0 ? remainingAccounts : undefined,\n      }),\n    );\n  \n    try {\n      return (\n        await sendTransactions(\n          candyMachine.program.provider.connection,\n          candyMachine.program.provider.wallet,\n          [instructions, cleanupInstructions],\n          [signers, []],\n        )\n      ).txs.map(t => t.txid);\n    } catch (e) {\n      console.log(e);\n    }\n    return [];\n  };\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n    \n    // Create a new Solana provider object\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n  \n    return provider;\n  };\n\n  // Declare getCandyMachineState as an async method\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n    \n    // Get metadata about your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n\n    // Create a program that you can call\n    const program = new Program(idl, candyMachineProgram, provider);\n\n    // Fetch the metadata from your candy machine\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n    \n    // Parse out all our metadata and log it out\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n    const presale =\n      candyMachine.data.whitelistMintSettings &&\n      candyMachine.data.whitelistMintSettings.presale &&\n      (!candyMachine.data.goLiveDate ||\n        candyMachine.data.goLiveDate.toNumber() > new Date().getTime() / 1000);\n    \n    // We will be using this later in our UI so let's generate this now\n    const goLiveDateTimeString = `${new Date(\n      goLiveData * 1000\n    ).toGMTString()}`\n\n    // Add this data to your state to render\n    setCandyMachine({\n      id: process.env.REACT_APP_CANDY_MACHINE_ID,\n      program,\n      state: {\n        itemsAvailable,\n        itemsRedeemed,\n        itemsRemaining,\n        goLiveData,\n        goLiveDateTimeString,\n        isSoldOut: itemsRemaining === 0,\n        isActive:\n          (presale ||\n            candyMachine.data.goLiveDate.toNumber() < new Date().getTime() / 1000) &&\n          (candyMachine.endSettings\n            ? candyMachine.endSettings.endSettingType.date\n              ? candyMachine.endSettings.number.toNumber() > new Date().getTime() / 1000\n              : itemsRedeemed < candyMachine.endSettings.number.toNumber()\n            : true),\n        isPresale: presale,\n        goLiveDate: candyMachine.data.goLiveDate,\n        treasury: candyMachine.wallet,\n        tokenMint: candyMachine.tokenMint,\n        gatekeeper: candyMachine.data.gatekeeper,\n        endSettings: candyMachine.data.endSettings,\n        whitelistMintSettings: candyMachine.data.whitelistMintSettings,\n        hiddenSettings: candyMachine.data.hiddenSettings,\n        price: candyMachine.data.price,\n      },\n    });\n    \n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n      presale,\n    });\n  };\n\n  // Create render function\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(candyMachine.state.goLiveData * 1000);\n\n    // If currentDate is before dropDate, render our Countdown component\n    if (currentDate < dropDate) {\n      console.log('Before drop date!');\n      // Don't forget to pass over your dropDate!\n      return <CountdownTimer dropDate={dropDate} />;\n    }\n\n    // Else let's just return the current drop date\n    return <p>{`Drop Date: ${candyMachine.state.goLiveDateTimeString}`}</p>;\n  };\n\n  return (\n    // Only show this if machineStats is available\n    candyMachine && (\n      <div className=\"machine-container\">\n        {renderDropTimer()}\n        <p>{`Items Minted: ${candyMachine.state.itemsRedeemed} / ${candyMachine.state.itemsAvailable}`}</p>\n        <p>Price: <b>0.01 SOL</b></p>\n        <button className=\"cta-button mint-button\" onClick={mintToken}>\n          Mint NFT\n        </button>\n      </div>\n    )\n  );\n};\n\nexport default CandyMachine;\n","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContents/Components.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Header/Navbar/index.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/index.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/utils/SectionProps.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/partials/Logo.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/partials/FooterNav.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/layout/partials/FooterSocial.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/ButtonGroup.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Modal.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Image.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Button.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/Input.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/sections/partials/SectionHeader.js",[],"/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/connection.js",[],"/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CandyMachine/helpers.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/FadeContents.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/Components.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/FormLabel.js",[],"/Users/bryan/solana-gif-portal/app/src/components/Landing/components/elements/FormHint.js",[],"/Users/bryan/solana-gif-portal/app/src/components/NftDrop/app/src/CountdownTimer/index.js",["265"],"import React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = ({ dropDate }) => {\n    // State\n    const [timerString, setTimerString] = useState('');\n\n    // Our useEffect will run on component load\n    useEffect(() => {\n        console.log('Setting interval...');\n\n        // Use setInterval to run this piece of code every second\n        const interval = setInterval(() => {\n            const currentDate = new Date().getTime();\n            const distance = dropDate - currentDate;\n\n            // Here it's as easy as doing some time math to get the different properties\n            const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n            const hours = Math.floor(\n            (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n            );\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n            // We have our desired output, set it in state!\n            setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n\n            // If our distance passes zero this means that it's drop time!\n            if (distance < 0) {\n            console.log('Clearing interval...');\n            clearInterval(interval);\n            }\n        }, 1000);\n\n        // Anytime our component unmounts let's clean up our interval\n        return () => {\n            if (interval) {\n            clearInterval(interval);\n            }\n        };\n    }, []);\n\n    return (\n    <div className=\"timer-container\">\n        <p className=\"timer-header\">NFT Mint Starting In</p>\n        {timerString && <p className=\"timer-value\">{`⏰  ${timerString}`}</p>}\n    </div>\n    );\n};\n\nexport default CountdownTimer;\n","/Users/bryan/solana-gif-portal/app/src/components/Header/DropdownContainer/utils.js",[],"/Users/bryan/solana-gif-portal/app/src/components/utils/checkIfWalletIsConnected.js",["266"],"import { useState } from \"react\";\n/*\n* This function holds the logic for deciding if a Phantom Wallet is\n* connected or not\n*/\n\nexport const CheckIfWalletIsConnected = async (setWalletAddress) => {\n    // State\n    // const [setWalletAddress] = useState(null);\n\n    try {\n        const { solana } = window;\n\n        if (solana) {\n            if (solana.isPhantom) {\n                console.log('Phantom wallet found!');\n\n                /*\n                * The solana object gives us a function that will allow us to connect\n                * directly with the user's wallet!\n                */\n                const response = await solana.connect({ onlyIfTrusted: true });\n                console.log(\n                'Connected with Public Key:',\n                response.publicKey.toString()\n                );\n\n                /*\n                * Set the user's publicKey in state to be used later!\n                */\n                setWalletAddress(response.publicKey.toString());\n                return response.publicKey.toString()\n            }\n        } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};","/Users/bryan/solana-gif-portal/app/src/components/utils/connectWallet.js",[],"/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/sendGif.js",[],"/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/getGifList.js",["267"],"import { useState } from 'react';\nimport idl from '../idl.json';\nimport { getProvider } from '../../utils/getProvider';\nimport { Program } from '@project-serum/anchor';\n\nexport const getGifList = async(programID, baseAccount, setGifList) => {\n  try {\n    console.log(\">>>>\", baseAccount)\n    const provider = getProvider();\n    const program = new Program(idl, programID, provider);\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n    \n    console.log(\"Got the account\", account)\n    setGifList(account.gifList\n                            .sort((a,b) => (b.votes > a.votes ? 1 : -1)))\n\n  } catch (error) {\n    console.log(\"Error in getGifList: \", error)\n    setGifList(null);\n  }\n};\n","/Users/bryan/solana-gif-portal/app/src/components/utils/getProvider.js",["268","269","270"],"import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nexport const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n  \treturn provider;\n};\n","/Users/bryan/solana-gif-portal/app/src/components/utils/renderNotConnectedContainer.js",[],"/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/renderConnectedContainer.js",[],"/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/createGifAccount.js",[],"/Users/bryan/solana-gif-portal/app/src/components/GifPortal/components/upvoteGif.js",[],{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","replacedBy":"274"},{"ruleId":"275","severity":1,"message":"276","line":9,"column":8,"nodeType":"277","messageId":"278","endLine":9,"endColumn":14},{"ruleId":"275","severity":1,"message":"279","line":19,"column":9,"nodeType":"277","messageId":"278","endLine":19,"endColumn":22},{"ruleId":"275","severity":1,"message":"280","line":19,"column":24,"nodeType":"277","messageId":"278","endLine":19,"endColumn":31},{"ruleId":"275","severity":1,"message":"281","line":33,"column":7,"nodeType":"277","messageId":"278","endLine":33,"endColumn":16},{"ruleId":"275","severity":1,"message":"282","line":2,"column":8,"nodeType":"277","messageId":"278","endLine":2,"endColumn":16},{"ruleId":"275","severity":1,"message":"283","line":4,"column":8,"nodeType":"277","messageId":"278","endLine":4,"endColumn":14},{"ruleId":"275","severity":1,"message":"284","line":2,"column":23,"nodeType":"277","messageId":"278","endLine":2,"endColumn":29},{"ruleId":"275","severity":1,"message":"285","line":20,"column":11,"nodeType":"277","messageId":"278","endLine":20,"endColumn":15},{"ruleId":"275","severity":1,"message":"286","line":4,"column":8,"nodeType":"277","messageId":"278","endLine":4,"endColumn":21},{"ruleId":"275","severity":1,"message":"287","line":6,"column":8,"nodeType":"277","messageId":"278","endLine":6,"endColumn":19},{"ruleId":"275","severity":1,"message":"288","line":7,"column":8,"nodeType":"277","messageId":"278","endLine":7,"endColumn":11},{"ruleId":"275","severity":1,"message":"289","line":4,"column":3,"nodeType":"277","messageId":"278","endLine":4,"endColumn":7},{"ruleId":"275","severity":1,"message":"290","line":7,"column":3,"nodeType":"277","messageId":"278","endLine":7,"endColumn":14},{"ruleId":"275","severity":1,"message":"291","line":8,"column":3,"nodeType":"277","messageId":"278","endLine":8,"endColumn":11},{"ruleId":"275","severity":1,"message":"292","line":15,"column":7,"nodeType":"277","messageId":"278","endLine":15,"endColumn":11},{"ruleId":"275","severity":1,"message":"290","line":5,"column":3,"nodeType":"277","messageId":"278","endLine":5,"endColumn":14},{"ruleId":"275","severity":1,"message":"291","line":6,"column":3,"nodeType":"277","messageId":"278","endLine":6,"endColumn":11},{"ruleId":"275","severity":1,"message":"289","line":8,"column":3,"nodeType":"277","messageId":"278","endLine":8,"endColumn":7},{"ruleId":"275","severity":1,"message":"289","line":3,"column":10,"nodeType":"277","messageId":"278","endLine":3,"endColumn":14},{"ruleId":"275","severity":1,"message":"293","line":3,"column":16,"nodeType":"277","messageId":"278","endLine":3,"endColumn":31},{"ruleId":"275","severity":1,"message":"294","line":3,"column":33,"nodeType":"277","messageId":"278","endLine":3,"endColumn":40},{"ruleId":"275","severity":1,"message":"295","line":9,"column":7,"nodeType":"277","messageId":"278","endLine":9,"endColumn":11},{"ruleId":"275","severity":1,"message":"296","line":18,"column":7,"nodeType":"277","messageId":"278","endLine":18,"endColumn":22},{"ruleId":"275","severity":1,"message":"297","line":33,"column":7,"nodeType":"277","messageId":"278","endLine":33,"endColumn":22},{"ruleId":"275","severity":1,"message":"298","line":39,"column":7,"nodeType":"277","messageId":"278","endLine":39,"endColumn":22},{"ruleId":"275","severity":1,"message":"299","line":4,"column":8,"nodeType":"277","messageId":"278","endLine":4,"endColumn":12},{"ruleId":"275","severity":1,"message":"300","line":5,"column":8,"nodeType":"277","messageId":"278","endLine":5,"endColumn":17},{"ruleId":"275","severity":1,"message":"301","line":6,"column":8,"nodeType":"277","messageId":"278","endLine":6,"endColumn":13},{"ruleId":"275","severity":1,"message":"302","line":7,"column":8,"nodeType":"277","messageId":"278","endLine":7,"endColumn":13},{"ruleId":"275","severity":1,"message":"303","line":28,"column":10,"nodeType":"277","messageId":"278","endLine":28,"endColumn":26},{"ruleId":"275","severity":1,"message":"304","line":30,"column":9,"nodeType":"277","messageId":"278","endLine":30,"endColumn":18},{"ruleId":"275","severity":1,"message":"305","line":35,"column":9,"nodeType":"277","messageId":"278","endLine":35,"endColumn":19},{"ruleId":"306","severity":1,"message":"307","line":306,"column":6,"nodeType":"308","endLine":306,"endColumn":8,"suggestions":"309"},{"ruleId":"306","severity":1,"message":"310","line":41,"column":8,"nodeType":"308","endLine":41,"endColumn":10,"suggestions":"311"},{"ruleId":"275","severity":1,"message":"312","line":1,"column":10,"nodeType":"277","messageId":"278","endLine":1,"endColumn":18},{"ruleId":"275","severity":1,"message":"312","line":1,"column":10,"nodeType":"277","messageId":"278","endLine":1,"endColumn":18},{"ruleId":"275","severity":1,"message":"313","line":1,"column":22,"nodeType":"277","messageId":"278","endLine":1,"endColumn":31},{"ruleId":"275","severity":1,"message":"314","line":2,"column":10,"nodeType":"277","messageId":"278","endLine":2,"endColumn":17},{"ruleId":"275","severity":1,"message":"315","line":2,"column":29,"nodeType":"277","messageId":"278","endLine":2,"endColumn":33},"no-native-reassign",["316"],"no-negated-in-lhs",["317"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'SystemProgram' is assigned a value but never used.","'Keypair' is assigned a value but never used.","'TEST_GIFS' is assigned a value but never used.","'ReactDOM' is defined but never used.","'styled' is defined but never used.","'Routes' is defined but never used.","'page' is assigned a value but never used.","'FeaturesTiles' is defined but never used.","'Testimonial' is defined but never used.","'Cta' is defined but never used.","'Icon' is defined but never used.","'HeadingLink' is defined but never used.","'LinkList' is defined but never used.","'Flex' is assigned a value but never used.","'DropdownSection' is defined but never used.","'Heading' is defined but never used.","'Logo' is assigned a value but never used.","'SubProductsList' is assigned a value but never used.","'ProductsSection' is assigned a value but never used.","'WorksWithStripe' is assigned a value but never used.","'Logo' is defined but never used.","'FooterNav' is defined but never used.","'Image' is defined but never used.","'Modal' is defined but never used.","'videoModalActive' is assigned a value but never used.","'openModal' is assigned a value but never used.","'closeModal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCandyMachineState'. Either include it or remove the dependency array.","ArrayExpression",["318"],"React Hook useEffect has a missing dependency: 'dropDate'. Either include it or remove the dependency array.",["319"],"'useState' is defined but never used.","'PublicKey' is defined but never used.","'Program' is defined but never used.","'web3' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},"Update the dependencies array to be: [getCandyMachineState]",{"range":"324","text":"325"},"Update the dependencies array to be: [dropDate]",{"range":"326","text":"327"},[8866,8868],"[getCandyMachineState]",[1520,1522],"[dropDate]"]