{"ast":null,"code":"var _jsxFileName = \"/Users/bryan/solana-gif-portal/src/App.js\",\n    _s = $RefreshSig$();\n\n/*\n * We are going to be using the useEffect hook!\n */\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'; // SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; // Change this up to be your Twitter if you want.\n\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TEST_GIFS = ['https://c.tenor.com/R9SJc2CDhXgAAAAM/taylor-swift.gif', 'https://media4.giphy.com/media/YJ627bD1Jtl2E/200.gif', 'https://media4.giphy.com/media/QZaOqI3JOYdnMTupXb/giphy.gif', 'https://media0.giphy.com/media/3ohBVbUzyTH3sWw1eU/giphy.gif'];\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); // Actions\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n  */\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n          */\n\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\");\n      return;\n    }\n\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  };\n\n  const upvoteGif = async id => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      return await program.rpc.upvoteGif(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey\n        }\n      });\n    } catch (error) {\n      console.log('Error Upvoting GifID: ', id, error);\n    }\n  };\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n\n      if (baseAccount === null) {\n        await program.rpc.startStuffOff({\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId\n          },\n          signers: [baseAccount]\n        });\n        console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      }\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"Do One-Time Initialization For GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this);\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            sendGif();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter gif link!\",\n            value: inputValue,\n            onChange: onInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"cta-button submit-gif-button\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"cta-button upvote-gif-button\",\n              data: item.id,\n              onClick: upvote.bind(this, item.id),\n              children: \"\\uD83D\\uDC4D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      console.log(\">>>>\", baseAccount);\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  const upvote = async id => {\n    console.log('Upvoting GifID: ', id);\n    upvoteGif(id);\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC Solana GIF Portal (Taylor's Version)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"View the Taylor Swift GIF collection in the metaverse \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built by @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/bryan/solana-gif-portal/src/App.js"],"names":["React","useEffect","useState","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","kp","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","error","connectWallet","sendGif","length","provider","getProvider","program","rpc","addGif","accounts","user","wallet","getGifList","upvoteGif","id","onInputChange","event","value","target","connection","createGifAccount","startStuffOff","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","preventDefault","map","item","index","gifLink","upvote","bind","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"mappings":"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","sourcesContent":["/*\n * We are going to be using the useEffect hook!\n */\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Change this up to be your Twitter if you want.\nconst TWITTER_HANDLE = 'bryantanjw';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = [\n\t'https://c.tenor.com/R9SJc2CDhXgAAAAM/taylor-swift.gif',\n\t'https://media4.giphy.com/media/YJ627bD1Jtl2E/200.gif',\n\t'https://media4.giphy.com/media/QZaOqI3JOYdnMTupXb/giphy.gif',\n\t'https://media0.giphy.com/media/3ohBVbUzyTH3sWw1eU/giphy.gif'\n]\n\n\nconst App = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Actions\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n  */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          /*\n           * The solana object gives us a function that will allow us to connect\n           * directly with the user's wallet!\n          */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const upvoteGif = async (id) => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      return await program.rpc.upvoteGif(id, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        }\n      });\n    } catch (error) {\n      console.log('Error Upvoting GifID: ', id, error);\n    }\n  }\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  \n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n  \treturn provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      if (baseAccount === null) {\n        await program.rpc.startStuffOff({\n          accounts: {\n            baseAccount: baseAccount.publicKey,\n            user: provider.wallet.publicKey,\n            systemProgram: SystemProgram.programId,\n          },\n          signers: [baseAccount]\n        });\n        console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      }\n      \n      await getGifList();\n\n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }  \n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return(\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n                <button \n                  type=\"submit\" \n                  className=\"cta-button upvote-gif-button\"\n                  data={item.id}\n                  onClick={upvote.bind(this, item.id)}\n                >\n                 👍\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async() => {\n    try {\n      console.log(\">>>>\", baseAccount)\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  };\n\n  const upvote = async (id) => {\n    console.log('Upvoting GifID: ', id);\n    upvoteGif(id);\n  };\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 Solana GIF Portal (Taylor's Version)</p>\n          <p className=\"sub-text\">\n            View the Taylor Swift GIF collection in the metaverse ✨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}